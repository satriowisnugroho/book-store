// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	entity "github.com/satriowisnugroho/book-store/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// OrderUsecaseInterface is an autogenerated mock type for the OrderUsecaseInterface type
type OrderUsecaseInterface struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: c, payload
func (_m *OrderUsecaseInterface) CreateOrder(c *gin.Context, payload *entity.OrderPayload) (*entity.Order, error) {
	ret := _m.Called(c, payload)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *entity.OrderPayload) (*entity.Order, error)); ok {
		return rf(c, payload)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *entity.OrderPayload) *entity.Order); ok {
		r0 = rf(c, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *entity.OrderPayload) error); ok {
		r1 = rf(c, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersByUserID provides a mock function with given fields: c, limit, offset
func (_m *OrderUsecaseInterface) GetOrdersByUserID(c *gin.Context, limit int, offset int) ([]*entity.OrderResponse, int, error) {
	ret := _m.Called(c, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetOrdersByUserID")
	}

	var r0 []*entity.OrderResponse
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(*gin.Context, int, int) ([]*entity.OrderResponse, int, error)); ok {
		return rf(c, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, int, int) []*entity.OrderResponse); ok {
		r0 = rf(c, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.OrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, int, int) int); ok {
		r1 = rf(c, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(*gin.Context, int, int) error); ok {
		r2 = rf(c, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewOrderUsecaseInterface creates a new instance of OrderUsecaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderUsecaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderUsecaseInterface {
	mock := &OrderUsecaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
