// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/satriowisnugroho/book-store/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// BookUsecaseInterface is an autogenerated mock type for the BookUsecaseInterface type
type BookUsecaseInterface struct {
	mock.Mock
}

// GetBooks provides a mock function with given fields: ctx, payload
func (_m *BookUsecaseInterface) GetBooks(ctx context.Context, payload entity.GetBooksPayload) ([]*entity.Book, int, error) {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for GetBooks")
	}

	var r0 []*entity.Book
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.GetBooksPayload) ([]*entity.Book, int, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.GetBooksPayload) []*entity.Book); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.GetBooksPayload) int); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, entity.GetBooksPayload) error); ok {
		r2 = rf(ctx, payload)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewBookUsecaseInterface creates a new instance of BookUsecaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookUsecaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookUsecaseInterface {
	mock := &BookUsecaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
